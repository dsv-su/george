package se.su.dsv.proctoring.web.proctor;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import java.util.UUID;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = InboundMessage.ProctorExamination.class, name = "proctor_examination"),
        @JsonSubTypes.Type(value = InboundMessage.CandidateJoined.class, name = "candidate_joined"),
        @JsonSubTypes.Type(value = InboundMessage.ConnectCandidate.class, name = "connect_candidate"),
        @JsonSubTypes.Type(value = InboundMessage.CameraStreamOffer.class, name = "camera_stream_offer"),
        @JsonSubTypes.Type(value = InboundMessage.ScreenStreamOffer.class, name = "screen_stream_offer"),
        @JsonSubTypes.Type(value = InboundMessage.CameraStreamAnswer.class, name = "camera_stream_answer"),
        @JsonSubTypes.Type(value = InboundMessage.IceCandidate.class, name = "ice_candidate"),
        @JsonSubTypes.Type(value = InboundMessage.ProctorIceCandidate.class, name = "proctor_ice_candidate"),
})
public sealed interface InboundMessage {
    record ProctorExamination(@JsonProperty("exam_id") String examId) implements InboundMessage {}
    record CandidateJoined(@JsonProperty("exam_id") String examId) implements InboundMessage {}

    /**
     * The proctor wants to connect to a candidate.
     * @param principalName the candidate to connect to
     * @param offer the proctor's WebRTC offer
     */
    record ConnectCandidate(
            @JsonProperty("principal") String principalName)
            implements InboundMessage {}

    /**
     * An offer to share a camera stream.
     * Comes from a candidate in response to a {@link ConnectCandidate} message from a proctor.
     *
     * @param peerConnectionId the id of the peer connection, generated by the server for the requesting proctor
     * @param offer the candidate's WebRTC offer
     */
    record CameraStreamOffer(
            @JsonProperty("id") UUID peerConnectionId,
            @JsonProperty("offer") RTCSessionDescription offer)
            implements InboundMessage {}

    /**
     * An offer to share a screen stream.
     * Comes from a candidate in response to a {@link ConnectCandidate} message from a proctor.
     *
     * @param peerConnectionId the id of the peer connection, generated by the server for the requesting proctor
     * @param streamId unique identifier for the stream
     * @param offer the candidate's WebRTC offer
     */
    record ScreenStreamOffer(
            @JsonProperty("id") UUID peerConnectionId,
            @JsonProperty("stream_id") String streamId,
            @JsonProperty("offer") RTCSessionDescription offer)
            implements InboundMessage {}

    /**
     * Answer to a {@link se.su.dsv.proctoring.web.proctor.Message.CameraStreamOffer} message.
     * Comes from a proctor in response to a {@code CameraStreamOffer} message from a candidate.
     *
     * @param principalName the candidate whose camera stream offer should be answered
     * @param answer the proctor's WebRTC answer (SDP)
     */
    record CameraStreamAnswer(
            @JsonProperty("principal") String principalName,
            @JsonProperty("answer") RTCSessionDescription answer)
            implements InboundMessage {}

    record IceCandidate(
            @JsonProperty("id") UUID peerConnectionId,
            @JsonProperty("candidate") RTCIceCandidate candidate)
            implements InboundMessage {}

    record ProctorIceCandidate(
            @JsonProperty("principal") String principalName,
            @JsonProperty("candidate") RTCIceCandidate candidate)
            implements InboundMessage {}
}
