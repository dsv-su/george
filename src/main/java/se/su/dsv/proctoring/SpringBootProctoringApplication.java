package se.su.dsv.proctoring;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.media.IntegerSchema;
import io.swagger.v3.oas.models.media.ObjectSchema;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.StringSchema;
import org.springdoc.core.customizers.OpenApiCustomizer;
import org.springdoc.core.utils.SpringDocUtils;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import se.su.dsv.proctoring.services.CandidateService;
import se.su.dsv.proctoring.services.ProctoringService;
import se.su.dsv.proctoring.services.Services;
import se.su.dsv.proctoring.web.proctor.WebSocketsHandler;

import javax.sql.DataSource;
import java.time.LocalTime;
import java.util.List;

@SpringBootApplication
@EnableWebSocket
public class SpringBootProctoringApplication {
    /**
     * Used by Spring Boot Maven plugin ({@code spring-boot:run}) to start the application.
     * @param args
     */
    public static void main(String[] args) {
        SpringApplication.run(SpringBootProctoringApplication.class, args);
    }

    static {
        SpringDocUtils config = SpringDocUtils.getConfig();
        // Configure OpenAPI to use a string format (ISO 8601) for LocalTime
        config.replaceWithSchema(LocalTime.class, new Schema<>()
                .type("string")
                .format("time")
                .description("ISO 8601 format")
                .example("14:00:00"));
    }

    /**
     * Require OAuth2 login for the entire application.
     *
     * @param http Spring configuration object
     * @return security filter that requires an authenticated OAuth2 session for
     * all endpoints
     * @throws Exception if configuration fails
     */
    @Bean
    public SecurityFilterChain security(HttpSecurity http)
            throws Exception
    {
        http.oauth2Login(Customizer.withDefaults());
        http.authorizeHttpRequests(authorization -> authorization
                .requestMatchers("/v3/api-docs").permitAll()
                .anyRequest().authenticated());
        http.csrf(csrf -> csrf.disable()); // Rely on session cookie SameSite attribute
        return http.build();
    }

    @Bean
    public Services proctoringService(DataSource dataSource) {
        return new Services(dataSource);
    }

    @Bean
    public WebSocketsHandler proctorWebSocketHandler(
            ObjectMapper objectMapper,
            ProctoringService proctoringService,
            CandidateService candidateService)
    {
        return new WebSocketsHandler(objectMapper, proctoringService, candidateService);
    }

    @Bean
    public WebSocketConfigurer proctorWS(WebSocketsHandler webSocketsHandler) {
        return registry -> {
            registry.addHandler(webSocketsHandler.new ProctorHandler(), "/ws/proctor");
            registry.addHandler(webSocketsHandler.new CandidateHandler(), "/ws/candidate");
        };
    }

    @Bean
    public OpenApiCustomizer openApiCustomizer() {
        return openApi -> {
            Components components = openApi.getComponents();
            components.addSchemas("ProblemDetail", new ObjectSchema()
                    .required(List.of("type", "status"))
                    .name("ProblemDetail")
                    .addProperty("type", new StringSchema()
                            .format("uri")
                            .description("A URI reference that identifies the problem type"))
                    .addProperty("status", new IntegerSchema()
                            .description("The HTTP status code generated by the origin server for this occurrence of the problem"))
                    .addProperty("title", new StringSchema()
                            .description("A short, human-readable summary of the problem type"))
                    .addProperty("detail", new StringSchema()
                            .type("string")
                            .description("A human-readable explanation specific to this occurrence of the problem"))
                    .addProperty("instance", new StringSchema()
                            .format("uri")
                            .description("A URI reference that identifies the specific occurrence of the problem"))
                    .additionalProperties(true));
        };
    }
}
