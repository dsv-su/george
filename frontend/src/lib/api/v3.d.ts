/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/administration/examination/{examinationId}/proctors': {
    /**
     * Get the proctors for a specific examination.
     * @description Get the proctors for a specific examination.
     */
    get: operations['getProctors'];
    /**
     * Add a proctor to an examination.
     * @description Add a proctor to an examination.
     */
    put: operations['addProctor'];
  };
  '/api/administration/examination/{examinationId}/candidates': {
    /**
     * Get the candidates for a specific examination.
     * @description Get the candidates for a specific examination.
     */
    get: operations['getCandidates'];
    /**
     * Add a candidate to an examination.
     * @description Add a candidate to an examination.
     */
    put: operations['addCandidate'];
  };
  '/api/administration/examination': {
    /**
     * Returns all the scheduled examinations.
     * @description Returns all the scheduled examinations.
     */
    get: operations['listExaminations'];
    /**
     * Schedule a new examination.
     * @description Schedule a new examination.
     */
    post: operations['scheduleNewExamination'];
  };
  '/api/profile': {
    /**
     * Returns the currently logged-in user's profile.
     * @description Returns the currently logged-in user's profile.
     */
    get: operations['profile'];
  };
  '/api/proctor/list': {
    /**
     * Returns the exams the given principal should proctor.
     * @description Returns the exams the given principal should proctor.
     */
    get: operations['listExamsToProctor'];
  };
  '/api/candidate/list': {
    /**
     * Returns the exams the given principal should take.
     * @description Returns the exams the given principal should take.
     */
    get: operations['listExamsToTake'];
  };
  '/api/administration/examination/{examinationId}': {
    /**
     * Get details about a specific examination.
     * @description Get details about a specific examination.
     */
    get: operations['getExaminationDetails'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Proctor: {
      principal: string;
    };
    ProblemDetail: {
      /**
       * Format: uri
       * @description A URI reference that identifies the problem type
       */
      type: string;
      /**
       * Format: int32
       * @description The HTTP status code generated by the origin server for this occurrence of the problem
       */
      status: number;
      /** @description A short, human-readable summary of the problem type */
      title?: string;
      /** @description A human-readable explanation specific to this occurrence of the problem */
      detail?: string;
      /**
       * Format: uri
       * @description A URI reference that identifies the specific occurrence of the problem
       */
      instance?: string;
      [key: string]: unknown;
    };
    Candidate: {
      principal: string;
    };
    NewExaminationRequest: {
      title: string;
      /** Format: date */
      date: string;
      /**
       * Format: time
       * @description ISO 8601 format
       * @example 14:00:00
       */
      start: string;
      /**
       * Format: time
       * @description ISO 8601 format
       * @example 14:00:00
       */
      end: string;
    };
    ExaminationDetails: {
      id: string;
      title: string;
      /** Format: date */
      date: string;
      /**
       * Format: time
       * @description ISO 8601 format
       * @example 14:00:00
       */
      start: string;
      /**
       * Format: time
       * @description ISO 8601 format
       * @example 14:00:00
       */
      end: string;
    };
    Exam: {
      /** @description unique identifier for this exam */
      id: string;
      /** @description human-readable title that uniquely identifies this exam */
      title: string;
    };
    'candidate.Exam': {
      /** @description unique identifier for this exam */
      id: string;
      /** @description human-readable title that uniquely identifies this exam */
      title: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get the proctors for a specific examination.
   * @description Get the proctors for a specific examination.
   */
  getProctors: {
    parameters: {
      path: {
        /** @description the id of the examination */
        examinationId: string;
      };
    };
    responses: {
      /** @description A valid examination id was provided. */
      200: {
        content: {
          'application/json': components['schemas']['Proctor'][];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Add a proctor to an examination.
   * @description Add a proctor to an examination.
   */
  addProctor: {
    parameters: {
      path: {
        /** @description the id of the examination */
        examinationId: string;
      };
    };
    /** @description the proctor to add */
    requestBody: {
      content: {
        'application/json': components['schemas']['Proctor'];
      };
    };
    responses: {
      /** @description The proctor was successfully added to the examination. */
      204: {
        content: never;
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Get the candidates for a specific examination.
   * @description Get the candidates for a specific examination.
   */
  getCandidates: {
    parameters: {
      path: {
        /** @description the id of the examination */
        examinationId: string;
      };
    };
    responses: {
      /** @description The examination was found. */
      200: {
        content: {
          'application/json': components['schemas']['Candidate'][];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Add a candidate to an examination.
   * @description Add a candidate to an examination.
   */
  addCandidate: {
    parameters: {
      path: {
        /** @description the id of the examination */
        examinationId: string;
      };
    };
    /** @description the candidate to add */
    requestBody: {
      content: {
        'application/json': components['schemas']['Candidate'];
      };
    };
    responses: {
      /** @description The candidate was successfully added to the examination. */
      204: {
        content: never;
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Returns all the scheduled examinations.
   * @description Returns all the scheduled examinations.
   */
  listExaminations: {
    responses: {
      /** @description The examinations were found. */
      200: {
        content: {
          'application/json': components['schemas']['ExaminationDetails'][];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Schedule a new examination.
   * @description Schedule a new examination.
   */
  scheduleNewExamination: {
    /** @description details about the new examination */
    requestBody: {
      content: {
        'application/json': components['schemas']['NewExaminationRequest'];
      };
    };
    responses: {
      /** @description The examination was successfully scheduled. */
      201: {
        content: {
          'application/json': components['schemas']['ExaminationDetails'];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Returns the currently logged-in user's profile.
   * @description Returns the currently logged-in user's profile.
   */
  profile: {
    responses: {
      /** @description the currently logged-in user's principal name */
      200: {
        content: {
          '*/*': string;
        };
      };
    };
  };
  /**
   * Returns the exams the given principal should proctor.
   * @description Returns the exams the given principal should proctor.
   */
  listExamsToProctor: {
    responses: {
      /** @description the exams the given principal should proctor. */
      200: {
        content: {
          '*/*': components['schemas']['Exam'][];
        };
      };
    };
  };
  /**
   * Returns the exams the given principal should take.
   * @description Returns the exams the given principal should take.
   */
  listExamsToTake: {
    responses: {
      /** @description The exams the given candidate should take. */
      200: {
        content: {
          'application/json': components['schemas']['candidate.Exam'][];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
  /**
   * Get details about a specific examination.
   * @description Get details about a specific examination.
   */
  getExaminationDetails: {
    parameters: {
      path: {
        /** @description the id of the examination */
        examinationId: string;
      };
    };
    responses: {
      /** @description The examination was found. */
      200: {
        content: {
          'application/json': components['schemas']['ExaminationDetails'];
        };
      };
      /** @description Something is wrong with the request, needs fixing before sending again. */
      400: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
      /** @description The request was fine, there was just a problem handling it. */
      500: {
        content: {
          'application/json': components['schemas']['ProblemDetail'];
        };
      };
    };
  };
}
